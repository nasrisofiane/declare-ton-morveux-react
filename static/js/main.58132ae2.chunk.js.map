{"version":3,"sources":["services/DynosStates.js","services/AppContext.js","components/Header.js","services/AnonymousRoute.js","services/PrivateRoute.js","components/SchoolsInput.js","components/ChildrenInput.js","components/ChildUpdateForm.js","components/ChildrenList.js","views/ChildDeclaration.js","components/SignIn.js","components/SignUp.js","views/Login.js","services/Chart.js","components/Charts.js","components/Leaflet.js","components/SchoolStats.js","views/Welcome.js","App.js","reportWebVitals.js","components/Loading.js","index.js"],"names":["DynosStates","SLEEPING","UP","STARTING","AppContext","createContext","AppContextProvider","children","useState","all","Map","selectedSchool","schools","setSchools","id","username","isAuthenticated","token","user","setUser","dynosState","setDynosState","isDatasLoaded","setIsDatasLoaded","myChildren","setMyChildren","fetchIsAuthenticated","fetch","process","credentials","then","res","json","prev","useEffect","schoolsToMap","map","school","name","headers","Headers","append","method","state","catch","err","console","log","getServerCurrentStatus","me","Provider","value","fetchMyChildren","Number","isInteger","Header","appContext","useContext","userIsAuthenticated","setUserIsAuthenticated","isOpen","setIsOpen","logout","response","text","result","error","color","dark","expand","className","to","onClick","navbar","right","renderLogoutButton","AnonymousRoute","rest","from","useLocation","pathname","render","location","PrivateRoute","styles","container","position","width","minWidth","maxWidth","zIndex","mdbContainer","fontSize","padding","margin","mdbListGroup","height","maxHeight","window","innerWidth","innerHeight","overflowX","overflowY","SchoolsInput","isLocal","getter","selectedOption","setSelectedOption","displayList","setDisplayList","filteredSchools","setfilteredSchools","isCursorOnList","setIsCursorOnList","handleSelectOption","e","target","attributes","handleDisplayList","show","displayElement","hiddingElement","getSchools","Array","filter","includes","customFilter","get","handleSetSchool","style","autoComplete","onBlur","onFocus","display","onMouseEnter","onMouseLeave","key","hover","ChildrenInput","setSelectedSchool","firstName","setFirstName","lastName","setLastName","cleanInputs","md","type","onChange","label","icon","body","JSON","stringify","ok","ChildUpdateForm","isSick","isContagious","sick","setSick","contagious","setContagious","isUpdated","setIsUpdated","isFetching","setIsFetching","handleSubmitNewChildState","finally","resetButtonState","setTimeout","checked","htmlFor","baseElement","role","far","onPointerEnter","generateDynamicButton","ChildrenList","child","i","currentCollapseName","currentHeadingName","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","ChildDeclaration","SignIn","password","inputDatas","setInputDatas","match","useRouteMatch","validate","url","SignUp","email","errors","setErrors","isAccountRegistered","setIsAccountRegistered","messages","Object","values","length","message","generateFieldsMessages","status","Login","path","component","exact","ChartOptions","responsive","Charts","declarations","setDeclarations","hasSelectedSchool","keys","setState","getDeclarationsCurrentYear","date","Date","isArray","declaration","getFullYear","getMonth","getNumberOfDeclarations","chartConfig","dataSet","dataLine","labels","currentDeclaration","monthName","toLocaleString","month","monthNameCapitalized","charAt","toUpperCase","slice","indexOfDatas","indexOf","newState","generateMonthFromNow","months","now","setMonth","substring","toLocaleUpperCase","push","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","ChartConfig","options","Leaflet","ref","useRef","current","lat","latitude","lng","longitude","setView","MapContainer","whenCreated","mapInstance","center","zoom","scrollWheelZoom","TileLayer","attribution","Marker","Popup","viewLoader","SchoolStats","nbOfSickAndContagious","setNbOfSickAndContagious","nbOfSick","setNbOfSick","Welcome","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Loading","isLoading","loadingMessage","background","top","createLoading","dotenv","config","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58132ae2.chunk.js","sourcesContent":["const DynosStates = {\r\n    SLEEPING : 'idle',\r\n    UP : 'up',\r\n    STARTING : 'starting'\r\n}\r\n\r\nexport default DynosStates;","import React, { createContext, useState, useEffect } from 'react';\r\nimport DynosStates from './DynosStates';\r\n\r\nconst AppContext = createContext();\r\n\r\nconst AppContextProvider = ({ children }) => {\r\n    const [schools, setSchools] = useState({\r\n        all: new Map(),\r\n        selectedSchool: {}\r\n    });\r\n\r\n    const [user, setUser] = useState({\r\n        id: null,\r\n        username: null,\r\n        isAuthenticated: false,\r\n        token: null\r\n    });\r\n\r\n    const [dynosState, setDynosState] = useState(DynosStates.SLEEPING);\r\n    const [isDatasLoaded, setIsDatasLoaded] = useState(false);\r\n\r\n    const [myChildren, setMyChildren] = useState([]);\r\n\r\n    const getServerCurrentStatus = () =>{\r\n        const headers = new Headers();\r\n        headers.append('Accept', process.env.REACT_APP_HEROKU_ACCEPT_HEADER);\r\n        headers.append('Authorization', `Bearer ${process.env.REACT_APP_HEROKU_TOKEN}`)\r\n\r\n        const res = fetch(process.env.REACT_APP_SERVER_DYNOS_URL, { \r\n            headers : headers,\r\n            method : 'GET'\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => setDynosState(res[0].state))\r\n            .catch( err => console.log('Cannot retrieve Server status'));\r\n\r\n    }\r\n\r\n    const fetchIsAuthenticated = () => {\r\n\r\n        const res = fetch(`${process.env.REACT_APP_API_URL}/isAuthenticated`, {\r\n            credentials: 'include'\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => setUser(prev => {\r\n                return {\r\n                    ...prev,\r\n                    isAuthenticated: res\r\n                }\r\n            })\r\n            );\r\n    }\r\n\r\n    const fetchSchools = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/schools`)\r\n            .then(res => res.json())\r\n            .then(schools => {\r\n                let schoolsToMap = new Map(schools.map(school => [school.name, school]));\r\n                setSchools(prev => {\r\n                    return {\r\n                        ...prev,\r\n                        all: schoolsToMap\r\n                    }\r\n                });\r\n\r\n                setIsDatasLoaded(true);\r\n            });\r\n    }\r\n\r\n    const fetchMyChildren = () => {\r\n        if (Number.isInteger(user.id)) {\r\n            fetch(`${process.env.REACT_APP_API_URL}/api/children/parent/${user.id}`, {\r\n                credentials: 'include'\r\n            })\r\n                .then(res => res.json())\r\n                .then(children => {\r\n                    setMyChildren(children);\r\n                });\r\n        }\r\n    }\r\n\r\n    const fetchMyAccount = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/parents/me`, {\r\n            credentials: 'include'\r\n        })\r\n            .then(res => res.json())\r\n            .then(me => {\r\n                setUser((prev) => {\r\n                    return {\r\n                        ...prev,\r\n                        id: me.id,\r\n                        username: me.username\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchSchools();\r\n        fetchIsAuthenticated();\r\n        getServerCurrentStatus();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (user.isAuthenticated) {\r\n            fetchMyAccount();\r\n        }\r\n    }, [user.isAuthenticated]);\r\n\r\n    return (\r\n        <AppContext.Provider value={\r\n            {\r\n                schools,\r\n                setSchools,\r\n                user,\r\n                setUser,\r\n                fetchIsAuthenticated,\r\n                fetchMyChildren,\r\n                myChildren,\r\n                dynosState,\r\n                setDynosState,\r\n                isDatasLoaded\r\n            }\r\n        }>\r\n            { children}\r\n        </AppContext.Provider>\r\n    );\r\n}\r\n\r\nexport { AppContextProvider, AppContext };","import { MDBBtn, MDBCollapse, MDBIcon, MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBNavItem } from \"mdbreact\";\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { AppContext } from '../services/AppContext';\r\n\r\nconst Header = () => {\r\n\r\n    const appContext = useContext(AppContext);\r\n    const [userIsAuthenticated, setUserIsAuthenticated] = useState(false);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const logout = () => {\r\n\r\n        var requestOptions = {\r\n            method: 'POST',\r\n            credentials : 'include',\r\n        };\r\n\r\n        fetch(`${process.env.REACT_APP_API_URL}/logout`, requestOptions)\r\n            .then(response => response.text())\r\n            .then(result => appContext.fetchIsAuthenticated())\r\n            .catch(error => console.log('error', error));\r\n    }\r\n\r\n    const toggleCollapse = () => {\r\n        setIsOpen(!isOpen);\r\n      }\r\n\r\n    const renderLogoutButton = () => {\r\n        if (userIsAuthenticated) {\r\n            return (\r\n                <MDBNavItem className=\"d-flex align-items-center \">\r\n                    <a onClick={logout} className=\"text-light nav-link\">Se deconnecter</a>\r\n                </MDBNavItem>\r\n            );\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setUserIsAuthenticated(appContext.user.isAuthenticated);\r\n    }, [appContext.user.isAuthenticated])\r\n\r\n    return (\r\n        <MDBNavbar color=\"default-color\" dark expand=\"md\">\r\n            <MDBNavbarBrand>\r\n                <Link className=\"navbar-brand\" to=\"/\">Déclare Ton Morveux</Link>\r\n            </MDBNavbarBrand>\r\n\r\n            <MDBNavbarToggler onClick={toggleCollapse}/>\r\n            <MDBCollapse id=\"navbarCollapse3\" isOpen={isOpen} navbar>\r\n                \r\n                <MDBNavbarNav right>\r\n                    <MDBNavItem className=\"mr-3\">\r\n                        <Link className=\"nav-link\" to=\"/childDeclaration\">Déclarez un enfant</Link>\r\n                    </MDBNavItem>\r\n\r\n                    {renderLogoutButton()}\r\n                </MDBNavbarNav>\r\n            </MDBCollapse>\r\n        </MDBNavbar>\r\n\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { useContext, useEffect } from 'react';\r\nimport { Redirect, Route, useLocation } from 'react-router-dom';\r\nimport { AppContext } from './AppContext';\r\n\r\nconst AnonymousRoute = ({ children, ...rest }) => {\r\n    const { user } = useContext(AppContext);\r\n    const location = useLocation();\r\n    let { from } = location.state || { from: { pathname: \"/\" } };\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n\r\n            render={({ location }) => {\r\n                return !user.isAuthenticated ? children : <Redirect to={{ pathname: from.pathname, state: { from: location } }} />\r\n            }\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default AnonymousRoute;","import React, { useContext, useEffect } from 'react';\r\nimport { Redirect, Route, useLocation } from 'react-router-dom';\r\nimport { AppContext } from './AppContext';\r\n\r\n\r\nconst PrivateRoute = ({ children, ...rest }) => {\r\n    const { user } = useContext(AppContext);\r\n    const location = useLocation();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n\r\n            render={({ location }) => {\r\n                return user.isAuthenticated ? children : <Redirect to={{ pathname: '/login', state: { from: location } }} />\r\n                \r\n            }\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default PrivateRoute;","import { MDBContainer, MDBInput, MDBListGroup, MDBListGroupItem } from 'mdbreact';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { AppContext } from '../services/AppContext';\r\nimport './css/SchoolsInput.css';\r\n\r\n\r\nconst getWindowDimensions = () => {\r\n    return {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    container: {\r\n        position: 'relative',\r\n        width: '10%',\r\n        minWidth: '300px',\r\n        maxWidth: '700px',\r\n        zIndex : 1000\r\n    },\r\n\r\n    mdbContainer: {\r\n        fontSize: '13px',\r\n        padding: '0px',\r\n        margin: '0px'\r\n    },\r\n\r\n    mdbListGroup: {\r\n        width: '100%',\r\n        position: 'absolute',\r\n        height: 'auto',\r\n        maxHeight: getWindowDimensions().height / 2.9,\r\n        overflowX: 'hidden',\r\n        overflowY: 'auto'\r\n    }\r\n}\r\n\r\nconst SchoolsInput = ({ isLocal, getter }) => {\r\n    const { schools, setSchools } = useContext(AppContext);\r\n    const [selectedOption, setSelectedOption] = useState('');\r\n    const [displayList, setDisplayList] = useState('none');\r\n    const [filteredSchools, setfilteredSchools] = useState([]);\r\n    const [isCursorOnList, setIsCursorOnList] = useState(false);\r\n\r\n    const handleSchoolsInput = (e) => {\r\n        const value = e.target.value;\r\n        setSelectedOption(value);\r\n    }\r\n\r\n    const handleSelectOption = (e) => {\r\n        const value = e.target.attributes.value.value;\r\n        setSelectedOption(value);\r\n    }\r\n\r\n    const customFilter = (value) => {\r\n        if (value === selectedOption) {\r\n            return false;\r\n        }\r\n\r\n        return value.includes(selectedOption);\r\n    }\r\n\r\n    const handleSetSchool = () => {\r\n        const value = selectedOption;\r\n\r\n        if (value != '' && value && typeof value != 'undefined') {\r\n            const school = schools.all.get(value);\r\n\r\n            if (school != null) {\r\n                if(isLocal === true){\r\n                    getter(school);\r\n                } else {\r\n                    setSchools(prev => {\r\n                        return {\r\n                            ...prev,\r\n                            selectedSchool: school\r\n                        }\r\n                    })\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    const handleDisplayList = (show) => {\r\n        const displayElement = 'block';\r\n        const hiddingElement = 'none';\r\n\r\n        if (show === true && displayList != displayElement) {\r\n            setDisplayList(displayElement);\r\n\r\n        } else if (show === false && displayList != hiddingElement && isCursorOnList === false) {\r\n            setDisplayList(hiddingElement);\r\n        }\r\n\r\n    }\r\n\r\n    const getSchools = () => {\r\n        const filteredSchools = Array.from(schools.all).filter(([key, value]) => customFilter(value.name));\r\n        setfilteredSchools(filteredSchools);\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleSetSchool();\r\n        getSchools();\r\n    }, [selectedOption]);\r\n\r\n    useEffect(() => {\r\n        getSchools();\r\n    }, [schools.all]);\r\n\r\n    return (\r\n        <div style={styles.container}>\r\n            <MDBInput autoComplete=\"off\" id=\"school-input\" onBlur={() => handleDisplayList(false)} onFocus={() => handleDisplayList(true)} value={selectedOption} id=\"school-input\" label=\"Ecoles\" icon=\"school\" type=\"text\" list=\"schools\" onChange={handleSchoolsInput} />\r\n\r\n            <div id=\"schools\" style={{ display: displayList }}>\r\n                <MDBContainer style={styles.mdbContainer}>\r\n\r\n                    <MDBListGroup onMouseEnter={() => setIsCursorOnList(true)} onMouseLeave={() => setIsCursorOnList(false)} style={styles.mdbListGroup}>\r\n                        {\r\n                            filteredSchools\r\n                                .map(([key, value]) => <MDBListGroupItem id={key} key={key} value={value.name} onClick={handleSelectOption} hover>{value.name} </MDBListGroupItem>)\r\n\r\n                        }\r\n                    </MDBListGroup>\r\n                </MDBContainer>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SchoolsInput;","import { MDBBtn, MDBCol, MDBContainer, MDBIcon, MDBInput, MDBRow } from 'mdbreact';\r\nimport React, { useContext, useState } from 'react';\r\nimport { AppContext } from '../services/AppContext';\r\nimport SchoolsInput from './SchoolsInput';\r\n\r\nimport './css/ChildrenInput.css';\r\n\r\nconst ChildrenInput = () => {\r\n\r\n    const [selectedSchool, setSelectedSchool] = useState(null);\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n\r\n    const { fetchMyChildren } = useContext(AppContext);\r\n\r\n\r\n    const handleSchoolInputGetter = (school) => {\r\n        setSelectedSchool(school);\r\n    }\r\n\r\n    const addChildren = () => {\r\n        const headers = new Headers();\r\n        const body = {\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            school: { id: selectedSchool.id }\r\n        }\r\n\r\n        headers.append('Content-Type', 'application/json');\r\n\r\n        if (selectedSchool != null) {\r\n            fetch(`${process.env.REACT_APP_API_URL}/api/children`, {\r\n                headers: headers,\r\n                method: 'post',\r\n                credentials: 'include',\r\n                body: JSON.stringify(body)\r\n            })\r\n                .then((response) => {\r\n                    if (response.ok) {\r\n                        fetchMyChildren();\r\n                        cleanInputs();\r\n                        return response.json();\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    const handleLastNameInput = (e) => {\r\n        const value = e.target.value;\r\n        setLastName(value);\r\n    }\r\n\r\n    const handleFirstName = (e) => {\r\n        const value = e.target.value;\r\n        setFirstName(value);\r\n    }\r\n\r\n    const cleanInputs = () =>{\r\n        setFirstName('');\r\n        setLastName('');\r\n    }\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <MDBRow className=\"d-flex flex-column justify-content-center align-items-center mt-4\">\r\n                <p className=\"h5 text-center mb-4\">Ajoutez un enfant</p>\r\n\r\n                <MDBCol md=\"12\">\r\n                    <form className=\"d-flex flex-md-row flex-column justify-content-center\">\r\n                        <div className=\"grey-text d-flex flex-md-row flex-column justify-content-center align-items-center\">\r\n                            <div className=\"d-flex flex-row justify-content-center\">\r\n                                <div className=\"mr-1\">\r\n                                    <MDBInput value={lastName} type=\"text\" onChange={handleLastNameInput} label=\"Nom\" icon=\"child\" />\r\n                                </div>\r\n\r\n                                <div className=\"ml-1 mr-4\">\r\n                                    <MDBInput value={firstName} type=\"text\" onChange={handleFirstName} label=\"Prénom\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"ml-4 mr-4\">\r\n                                <SchoolsInput isLocal={true} getter={handleSchoolInputGetter} />\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"add-child-btn\" className=\"text-center d-flex justify-content-center align-items-center\">\r\n                            <MDBBtn onClick={addChildren} className=\"ml-4\"><MDBIcon icon=\"plus\" /></MDBBtn>\r\n                        </div>\r\n                    </form>\r\n                </MDBCol>\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}\r\n\r\nexport default ChildrenInput;","import { MDBBadge, MDBBtn, MDBIcon } from 'mdbreact';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst ChildUpdateForm = ({ id, isSick, isContagious }) => {\r\n\r\n    const [sick, setSick] = useState(false);\r\n    const [contagious, setContagious] = useState(false);\r\n    const [isUpdated, setIsUpdated] = useState(null);\r\n    const [isFetching, setIsFetching] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setSick(isSick);\r\n        setContagious(isContagious);\r\n    }, []);\r\n\r\n    const handleSubmitNewChildState = () => {\r\n        setIsFetching(true);\r\n\r\n        const headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n\r\n        const body = {\r\n            id: id,\r\n            sick: sick,\r\n            contagious: contagious\r\n        }\r\n\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/children/`, {\r\n            headers: headers,\r\n            method: 'put',\r\n            credentials: 'include',\r\n            body: JSON.stringify(body)\r\n        })\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    setIsUpdated(true);\r\n                } else {\r\n                    setIsUpdated(false);\r\n                }\r\n            })\r\n            .finally(() => setIsFetching(false));\r\n    }\r\n\r\n    const handleSickChange = (e) => {\r\n        const value = e.target.checked;\r\n        setSick(value);\r\n    }\r\n\r\n    const handleContagiousChange = (e) => {\r\n        const value = e.target.checked;\r\n        setContagious(value);\r\n    }\r\n\r\n    const resetButtonState = () => {\r\n        if (!isFetching) {\r\n            setIsUpdated(null);\r\n        }\r\n    }\r\n\r\n    const generateDynamicButton = () => {\r\n        let baseElement = null;\r\n\r\n        if (isFetching) {\r\n            baseElement = (<div role=\"status\" style={{ width: '16px', height: '16px' }} className=\"spinner-border text-light text-center\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>);\r\n        } else if (isUpdated || isUpdated === false) {\r\n            if (isUpdated) {\r\n                baseElement = <MDBIcon className=\"text-light\" far icon=\"check-circle\" />;\r\n            } else {\r\n                baseElement = <MDBIcon className=\"text-danger\" far icon=\"times-circle\" />\r\n            }\r\n\r\n        } else {\r\n            baseElement = 'Mettre à jour';\r\n        }\r\n\r\n        return <MDBBtn style={{ height: '38px', fontSize : '2vh' }} onPointerEnter={resetButtonState} onClick={handleSubmitNewChildState} className=\"text-light\">{baseElement}</MDBBtn>\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isUpdated){\r\n           setTimeout(() => setIsUpdated(null), 4000);\r\n        }\r\n    }, [isUpdated]);\r\n\r\n\r\n    return (\r\n        <div className=\"d-flex flex-md-row flex-column justify-content-between\">\r\n            <div className=\"custom-control custom-checkbox\">\r\n                <div>\r\n                    <input onChange={handleSickChange} id={`sick-checkbox-` + id} checked={sick} className=\"custom-control-input\" type=\"checkbox\" />\r\n                    <label className=\"custom-control-label\" htmlFor={`sick-checkbox-` + id}>Malade</label>\r\n                </div>\r\n\r\n                <div>\r\n                    <input onChange={handleContagiousChange} id={`contagious-checkbox-` + id} checked={contagious} className=\"custom-control-input\" type=\"checkbox\" />\r\n                    <label className=\"custom-control-label\" htmlFor={`contagious-checkbox-` + id}>Contagieux</label>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                {generateDynamicButton()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChildUpdateForm;","import 'bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { MDBAlert, MDBContainer } from 'mdbreact';\r\nimport React, { useContext, useEffect } from 'react';\r\nimport { AppContext } from '../services/AppContext';\r\nimport ChildUpdateForm from './ChildUpdateForm';\r\n\r\n\r\nconst ChildrenList = () => {\r\n    const { fetchMyChildren, user, myChildren } = useContext(AppContext);\r\n\r\n    useEffect(() => {\r\n        fetchMyChildren();\r\n    }, [user.id]);\r\n\r\n    const createAccordion = () => {\r\n        return (\r\n            <div className=\"accordion\" id=\"accordionChildren\">\r\n                <MDBAlert color=\"warning\" >\r\n                    Les enfants déclaré malades sont automatiquement déclaré non malade après 5 jours\r\n                </MDBAlert>\r\n                {myChildren.map((child, i) => {\r\n                    const currentCollapseName = `collapse-${i}`;\r\n                    const currentHeadingName = `heading-${i}`;\r\n\r\n                    return (\r\n                        <div key={i} className=\"accordion-item\">\r\n                            <h2 className=\"accordion-header\" id={currentHeadingName}>\r\n                                <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target={'#' + currentCollapseName} aria-expanded=\"false\" aria-controls={currentCollapseName}>\r\n                                    {child.firstName + ' ' + child.lastName}\r\n                                </button>\r\n                            </h2>\r\n\r\n                            <div id={currentCollapseName} className=\"accordion-collapse collapse\" aria-labelledby={currentHeadingName} data-bs-parent=\"#accordionChildren\">\r\n                                <div className=\"accordion-body\">\r\n                                    <p>{child.school.name}</p>\r\n                                    \r\n                                    <ChildUpdateForm id={child.id} isSick={child.sick} isContagious={child.contagious} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <MDBContainer>\r\n            {createAccordion()}\r\n            {/* <td>{child.lastName}</td>\r\n                                    <td>{child.firstName}</td>\r\n                                    <td>{child.school.name}</td>\r\n                                    <td>{child.sick ? 'Oui' : 'Non'}</td>\r\n                                    <td>{child.contagious ? 'Oui' : 'Non'}</td>\r\n                                    <td>@mdo</td> */}\r\n        </MDBContainer>\r\n    );\r\n}\r\n\r\nexport default ChildrenList;","import React from 'react';\r\nimport ChildrenInput from '../components/ChildrenInput';\r\nimport ChildrenList from '../components/ChildrenList';\r\n\r\nconst ChildDeclaration = () => {\r\n\r\n    return (\r\n        <div>\r\n            <ChildrenInput />\r\n            <ChildrenList />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChildDeclaration;","import { MDBBtn, MDBCol, MDBContainer, MDBInput, MDBRow } from 'mdbreact';\r\nimport React, { useContext, useState } from 'react';\r\nimport { Link, useRouteMatch } from 'react-router-dom';\r\nimport { AppContext } from '../services/AppContext';\r\n\r\nconst SignIn = () => {\r\n    const appContext = useContext(AppContext);\r\n\r\n    const [inputDatas, setInputDatas] = useState({\r\n        username: '',\r\n        password: ''\r\n    });\r\n\r\n    const match = useRouteMatch();\r\n\r\n    const authenticateUser = () => {\r\n        const headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n\r\n        if (inputDatas.username != null && inputDatas.password != null) {\r\n            fetch(`${process.env.REACT_APP_API_URL}/authenticate`, {\r\n                headers: headers,\r\n                method: 'post',\r\n                credentials: 'include',\r\n                body: JSON.stringify(inputDatas)\r\n            })\r\n                .then((response) => {\r\n                    if (response.ok) {\r\n                        return response.json();\r\n                    }\r\n                })\r\n                .then(token => {\r\n                    if (token) {\r\n                        appContext.setUser({\r\n                            isAuthenticated: true,\r\n                            ...token\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n\r\n    }\r\n\r\n    const handleUsernameInputChange = (e) => {\r\n        const username = e.target.value;\r\n\r\n        setInputDatas(prev => {\r\n            return {\r\n                ...prev,\r\n                username: username\r\n            }\r\n        })\r\n    }\r\n\r\n    const handlePasswordInputChange = (e) => {\r\n        const password = e.target.value;\r\n\r\n        setInputDatas(prev => {\r\n            return {\r\n                ...prev,\r\n                password: password\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <MDBRow className=\"d-flex justify-content-center align-items-center mt-4\">\r\n                <MDBCol md=\"6\">\r\n                    <form>\r\n                        <p className=\"h5 text-center mb-4\">Sign in</p>\r\n                        <div className=\"grey-text\">\r\n                            <MDBInput type=\"text\" onChange={handleUsernameInputChange} value={inputDatas.username} label=\"Nom d'utilisateur\" icon=\"user\" />\r\n                            <MDBInput onChange={handlePasswordInputChange} value={inputDatas.password} type=\"password\" label=\"Mot de passe\" icon=\"lock\" validate />\r\n                        </div>\r\n                        <div className=\"text-center\">\r\n                            <MDBBtn style={{ color : 'white'}} onClick={authenticateUser}>Se connecter</MDBBtn>\r\n                        </div>\r\n                    </form>\r\n                    \r\n                    <p className=\"mt-3\">Vous n'avez pas de compte ? <Link style={{display : 'inline'}} to={`${match.url}/signup`}>Enregistrez vous</Link></p>\r\n                </MDBCol>\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}\r\n\r\nexport default SignIn;","import React, { useState, useEffect } from 'react';\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBAlert } from 'mdbreact';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SignUp = () => {\r\n    const [inputDatas, setInputDatas] = useState({\r\n        username: '',\r\n        password: '',\r\n        email: ''\r\n    });\r\n\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const [isAccountRegistered, setIsAccountRegistered] = useState(null);\r\n\r\n    const registerUser = () => {\r\n        const headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n\r\n        if (inputDatas.username != null && inputDatas.password != null) {\r\n            fetch(`${process.env.REACT_APP_API_URL}/register`, {\r\n                headers: headers,\r\n                method: 'post',\r\n                body: JSON.stringify(inputDatas)\r\n            })\r\n                .then((response) => {\r\n                    if (response.ok) {\r\n                        setIsAccountRegistered(true);\r\n                    } else {\r\n                        setIsAccountRegistered(false);\r\n                    }\r\n\r\n                    if (response.status == 400) {\r\n                        console.log('CANNOT REGISTER 400 !');\r\n                        return response.json();\r\n                    }\r\n                })\r\n                .then(response => setErrors(response));\r\n        }\r\n\r\n    }\r\n\r\n    const cleanUpInputs = () => {\r\n        setInputDatas(prev => {\r\n\r\n            return {\r\n                ...prev,\r\n                username: '',\r\n                password: '',\r\n                email: ''\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    const handleUsernameInputChange = (e) => {\r\n        const username = e.target.value;\r\n\r\n        setInputDatas(prev => {\r\n            return {\r\n                ...prev,\r\n                username: username\r\n            }\r\n        })\r\n    }\r\n\r\n    const handlePasswordInputChange = (e) => {\r\n        const password = e.target.value;\r\n\r\n        setInputDatas(prev => {\r\n            return {\r\n                ...prev,\r\n                password: password\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleEmailInputChange = (e) => {\r\n        const email = e.target.value;\r\n\r\n        setInputDatas(prev => {\r\n            return {\r\n                ...prev,\r\n                email: email\r\n            }\r\n        })\r\n    }\r\n\r\n    const generateFieldsMessages = () => {\r\n        const messages = Object.values(errors);\r\n\r\n        if (messages.length > 0) {\r\n            return (\r\n                <div>\r\n                    { messages.map((message, i) => <MDBAlert key={i} color=\"danger\">{message}</MDBAlert>)}\r\n                </div>\r\n            )\r\n\r\n        } else {\r\n            return (\r\n                <div></div>\r\n            );\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAccountRegistered) {\r\n            cleanUpInputs();\r\n        }\r\n    }, [isAccountRegistered]);\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <MDBRow className=\"d-flex justify-content-center align-items-center mt-4\">\r\n                <MDBCol md=\"6\">\r\n                    <form>\r\n                        <p className=\"h5 text-center mb-4\">Sign up</p>\r\n                        <div className=\"grey-text\">\r\n                            <MDBInput value={inputDatas.username} type=\"text\" label=\"Nom d'utilisateur\" icon=\"user\" onChange={handleUsernameInputChange} />\r\n                            <MDBInput value={inputDatas.email} type=\"email\" label=\"Email\" icon=\"envelope\" onChange={handleEmailInputChange} />\r\n                            <MDBInput value={inputDatas.password} type=\"password\" label=\"Mot de passe\" icon=\"lock\" validate onChange={handlePasswordInputChange} />\r\n                        </div>\r\n                        \r\n                        {generateFieldsMessages()}\r\n\r\n                        <div className=\"text-center\">\r\n                            <MDBBtn style={{ color: 'white' }} onClick={registerUser}>S'enregistrer</MDBBtn>\r\n                        </div>\r\n\r\n\r\n                    </form>\r\n\r\n                    <p className=\"mt-3\">Vous avez déjà un compte ? <Link style={{ display: 'inline' }} to={`/login`}>Connectez vous</Link></p>\r\n                </MDBCol>\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}\r\n\r\nexport default SignUp;","import React from 'react';\r\nimport SignIn from '../components/SignIn';\r\nimport SignUp from '../components/SignUp';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    useRouteMatch\r\n} from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n    const match = useRouteMatch();\r\n\r\n    return (\r\n        <div className=\"flex-grow-1 d-flex justify-content-center align-items-center\">\r\n            <Switch>\r\n                <Route path={`${match.path}/signup`} component={SignUp} />\r\n\r\n                <Route exact path={`${match.path}/`} component={SignIn} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","\r\nconst ChartConfig = () => {\r\n\r\n    const generateMonthFromNow = () => {\r\n        let months = [];\r\n\r\n        for (let i = 11; i >= 0; i--) {\r\n            let now = new Date();\r\n            now.setMonth(now.getMonth() - i);\r\n\r\n            let month = now.toLocaleString('fr', { month: 'long' });\r\n            month = month.substring(0,1).toLocaleUpperCase() + month.substring(1, month.length);\r\n\r\n            months.push(month);\r\n        }\r\n\r\n        \r\n\r\n        return months;\r\n    }\r\n\r\n    generateMonthFromNow();\r\n\r\n    return {\r\n        dataLine: {\r\n            labels: generateMonthFromNow(),\r\n\r\n            datasets: [\r\n                {\r\n                    label: \"Malades non contagieux\",\r\n                    fill: true,\r\n                    lineTension: 0.3,\r\n                    backgroundColor: \"rgba(225, 204,230, .3)\",\r\n                    borderColor: \"rgb(205, 130, 158)\",\r\n                    borderCapStyle: \"butt\",\r\n                    borderDash: [],\r\n                    borderDashOffset: 0.0,\r\n                    borderJoinStyle: \"miter\",\r\n                    pointBorderColor: \"rgb(205, 130,1 58)\",\r\n                    pointBackgroundColor: \"rgb(255, 255, 255)\",\r\n                    pointBorderWidth: 10,\r\n                    pointHoverRadius: 5,\r\n                    pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\r\n                    pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\r\n                    pointHoverBorderWidth: 2,\r\n                    pointRadius: 1,\r\n                    pointHitRadius: 10,\r\n                    data: null\r\n                },\r\n                {\r\n                    label: \"Malades contagieux\",\r\n                    fill: true,\r\n                    lineTension: 0.3,\r\n                    backgroundColor: \"rgba(184, 185, 210, .3)\",\r\n                    borderColor: \"rgb(35, 26, 136)\",\r\n                    borderCapStyle: \"butt\",\r\n                    borderDash: [],\r\n                    borderDashOffset: 0.0,\r\n                    borderJoinStyle: \"miter\",\r\n                    pointBorderColor: \"rgb(35, 26, 136)\",\r\n                    pointBackgroundColor: \"rgb(255, 255, 255)\",\r\n                    pointBorderWidth: 10,\r\n                    pointHoverRadius: 5,\r\n                    pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\r\n                    pointHoverBorderColor: \"rgba(220, 220, 220, 1)\",\r\n                    pointHoverBorderWidth: 2,\r\n                    pointRadius: 1,\r\n                    pointHitRadius: 10,\r\n                    data: null\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n\r\nconst ChartOptions = () => {\r\n    return {\r\n        responsive: true,\r\n    }\r\n}\r\n\r\nexport { ChartOptions, ChartConfig };","import { MDBContainer } from 'mdbreact';\r\nimport React, { useState, useContext, useEffect } from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { ChartOptions, ChartConfig } from '../services/Chart';\r\nimport { AppContext } from '../services/AppContext';\r\n\r\nconst Charts = () => {\r\n\r\n    const { schools } = useContext(AppContext);\r\n    const [declarations, setDeclarations] = useState(null);\r\n\r\n    const fetchDeclarationsDate = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/declarations/${schools.selectedSchool.id}`)\r\n            .then(res => {\r\n                if (res.ok) {\r\n                    return res.json();\r\n                }\r\n            })\r\n            .then(declarations => setDeclarations(getDeclarationsCurrentYear(declarations)));\r\n    }\r\n\r\n    const hasSelectedSchool = () => {\r\n        return Object.keys(schools.selectedSchool).length > 0;\r\n    }\r\n\r\n    const [state, setState] = useState(null);\r\n\r\n    const getDeclarationsCurrentYear = (declarations) => {\r\n        const date = new Date();\r\n\r\n        if (Array.isArray(declarations)) {\r\n            const currentYearDeclarations = declarations\r\n                .map(declaration => {\r\n                    return { ...declaration, date: new Date(declaration.date) }\r\n                })\r\n                .filter(declaration => {\r\n                    if(date.getFullYear() === declaration.date.getFullYear()){\r\n                        if(declaration.date.getMonth() <= date.getMonth()){\r\n                            return true;\r\n                        }\r\n                    } else if(declaration.date.getFullYear() >= date.getFullYear()-1 ) {\r\n                        if(declaration.date.getMonth() > date.getMonth()){\r\n                            return true;\r\n                        }\r\n                    }\r\n                });\r\n\r\n            return currentYearDeclarations;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    const getNumberOfDeclarations = (contagious, chartConfig) => {\r\n        let dataSet = chartConfig.dataLine.labels.map(() => 0);\r\n\r\n        if (Array.isArray(declarations)) {\r\n            for (let i = 0; i < declarations.length; i++) {\r\n\r\n                const currentDeclaration = declarations[i];\r\n                const monthName = currentDeclaration.date.toLocaleString('fr', { month: 'long' });\r\n                const monthNameCapitalized = monthName.charAt(0).toUpperCase() + monthName.slice(1);\r\n                const indexOfDatas = state.dataLine.labels.indexOf(monthNameCapitalized);\r\n\r\n                if (currentDeclaration.contagious === contagious) {\r\n\r\n                    dataSet[indexOfDatas] = dataSet[indexOfDatas] + 1;\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return dataSet;\r\n    }\r\n\r\n    const viewLoader = () => {\r\n\r\n        if (hasSelectedSchool() && state != null) {\r\n            if (declarations === null) {\r\n                return (\r\n                    <MDBContainer className=\"mt-4\">\r\n                        <div role=\"status\" className=\"spinner-border text-primary text-center\">\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                        </div>\r\n                    </MDBContainer>\r\n                );\r\n            } else {\r\n                return (\r\n                    <MDBContainer>\r\n                        <h3 className=\"mt-5\">Graphique de l'année actuelle</h3>\r\n                        <Line data={state.dataLine} options={ChartOptions} />\r\n                    </MDBContainer>\r\n                )\r\n            }\r\n\r\n        } else {\r\n\r\n            return (\r\n                <div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (hasSelectedSchool()) {\r\n            fetchDeclarationsDate();\r\n        }\r\n    }, [schools.selectedSchool]);\r\n\r\n    useEffect(() => {\r\n        let newState = ChartConfig();\r\n        newState.dataLine.datasets[0].data = getNumberOfDeclarations(false, newState);\r\n        newState.dataLine.datasets[1].data = getNumberOfDeclarations(true, newState);\r\n\r\n        setState(newState);\r\n\r\n    }, [declarations]);\r\n\r\n    return viewLoader();\r\n}\r\n\r\nexport default Charts;","import { MDBContainer } from 'mdbreact';\r\nimport React, { useContext, useEffect, useRef } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport { AppContext } from '../services/AppContext';\r\n\r\nconst Leaflet = () => {\r\n    const { schools } = useContext(AppContext);\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n\r\n        if (schools.selectedSchool.id != null && ref.current != null) {\r\n            const lat = schools.selectedSchool.latitude;\r\n            const lng = schools.selectedSchool.longitude;\r\n\r\n            ref.current.setView([lng, lat], 20);\r\n        }\r\n\r\n    }, [schools.selectedSchool])\r\n\r\n    const viewLoader = () => {\r\n\r\n        if (schools.selectedSchool.id != null) {\r\n            const lat = schools.selectedSchool.latitude;\r\n            const lng = schools.selectedSchool.longitude;\r\n\r\n            return (\r\n                <MDBContainer>\r\n                    <MapContainer whenCreated={mapInstance => { ref.current = mapInstance }} center={[lng, lat]} zoom={13} scrollWheelZoom={false} style={{ height: '180px' }}>\r\n                        <TileLayer\r\n                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        />\r\n                        <Marker position={[lng, lat]}>\r\n                            <Popup>\r\n                                {schools.selectedSchool.name}\r\n                            </Popup>\r\n                        </Marker>\r\n                    </MapContainer>\r\n                </MDBContainer>\r\n\r\n            );\r\n        } else {\r\n            return <div></div>\r\n        }\r\n\r\n    }\r\n\r\n    return viewLoader();\r\n}\r\n\r\nexport default Leaflet;","import { MDBAlert, MDBContainer } from 'mdbreact';\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { AppContext } from '../services/AppContext';\r\n\r\nconst SchoolStats = () => {\r\n\r\n    const { schools } = useContext(AppContext);\r\n    const [nbOfSickAndContagious, setNbOfSickAndContagious] = useState(0);\r\n    const [nbOfSick, setNbOfSick] = useState(0);\r\n\r\n    const fetchSickAndContagious = () => {\r\n        fetch(`https://declare-ton-morveux.herokuapp.com/api/children/countIsSickAndIsContagiousBySchool/${schools.selectedSchool.id}`)\r\n            .then(res => res.json())\r\n            .then(res => setNbOfSickAndContagious(res));\r\n    }\r\n\r\n    const fetchSick = () => {\r\n        fetch(`https://declare-ton-morveux.herokuapp.com/api/children/countIsSickBySchool/${schools.selectedSchool.id}`)\r\n            .then(res => res.json())\r\n            .then(res => setNbOfSick(res));\r\n    }\r\n\r\n    const hasSelectedSchool = () => {\r\n        return Object.keys(schools.selectedSchool).length > 0;\r\n    }\r\n\r\n    const viewLoader = () => {\r\n\r\n        if (hasSelectedSchool()) {\r\n            return (\r\n                <MDBContainer>\r\n                    <MDBAlert color=\"warning\">\r\n                        <h4 className=\"alert-heading\">Informations</h4>\r\n                        <p>Il y a actuellement {nbOfSick} malades dont {nbOfSickAndContagious} contagieux sur cette école</p>\r\n                    </MDBAlert>\r\n                </MDBContainer>\r\n            )\r\n        } else {\r\n\r\n            return (\r\n                <div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (hasSelectedSchool()) {\r\n            fetchSickAndContagious();\r\n            fetchSick();\r\n        }\r\n    }, [schools.selectedSchool]);\r\n\r\n    return viewLoader();\r\n}\r\n\r\nexport default SchoolStats;","import React from 'react';\r\nimport Charts from '../components/Charts';\r\nimport Leaflet from '../components/Leaflet';\r\nimport SchoolsInput from '../components/SchoolsInput';\r\nimport SchoolStats from '../components/SchoolStats';\r\n\r\nconst Welcome = () => {\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"mt-4 d-flex justify-content-center\">\r\n                <SchoolsInput />\r\n            </div>\r\n            <SchoolStats />\r\n            <Leaflet/>\r\n            <Charts/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Welcome;","import React, { useEffect } from 'react';\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport AnonymousRoute from './services/AnonymousRoute';\r\nimport PrivateRoute from './services/PrivateRoute';\r\nimport ChildDeclaration from './views/ChildDeclaration';\r\nimport Login from './views/Login';\r\nimport Welcome from './views/Welcome';\r\n\r\nfunction App() {\r\n\r\n  useEffect(() => {\r\n    console.log('App v4');\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App h-100 d-flex flex-column\">\r\n      <header>\r\n        <Header />\r\n      </header>\r\n\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Welcome} />\r\n\r\n        <AnonymousRoute path=\"/login\">\r\n          <Login/>\r\n        </AnonymousRoute>\r\n\r\n        <PrivateRoute path=\"/childDeclaration\">\r\n          <ChildDeclaration />\r\n        </PrivateRoute>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { MDBContainer, MDBRow } from 'mdbreact';\r\nimport React, { useContext } from 'react';\r\nimport { AppContext } from '../services/AppContext';\r\nimport DynosStates from '../services/DynosStates';\r\n\r\nconst Loading = () => {\r\n    const { dynosState, isDatasLoaded } = useContext(AppContext);\r\n\r\n    const getWindowHeight = () => {\r\n        return window.innerHeight;\r\n    }\r\n\r\n    const createLoading = () => {\r\n        let isLoading = true;\r\n        let loadingMessage = '';\r\n\r\n        if ((dynosState === DynosStates.SLEEPING || dynosState === DynosStates.STARTING) && isDatasLoaded === false) {\r\n            isLoading = true;\r\n            loadingMessage = 'Le serveur Heroku est entrain de se reveiller ...';\r\n        } else if (isDatasLoaded === false) {\r\n            isLoading = true;\r\n            loadingMessage = 'Chargement des données ...';\r\n        } else {\r\n            isLoading = false;\r\n        }\r\n\r\n        if (isLoading) {\r\n            return (\r\n                <MDBRow id=\"loading-container\" style={{ height: getWindowHeight() + 'px', background : '#dbdbdbd9', zIndex : '1001', top : '0px'}} className=\"d-flex justify-content-center align-items-center position-absolute w-100 p-0 m-0 text-center\">\r\n\r\n                    <div>\r\n                        <p>{loadingMessage}</p>\r\n                        <div className=\"spinner-border\" style={{ color : '#2bbbad'}} role=\"status\">\r\n                            <span className=\"visually-hidden\">Loading...</span>\r\n                        </div>\r\n                    </div>\r\n\r\n                </MDBRow>\r\n            )\r\n        } else {\r\n            return <></>\r\n        }\r\n    }\r\n\r\n    return createLoading();\r\n}\r\n\r\nexport default Loading;","import '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\n\r\nimport dotenv from 'dotenv';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { AppContextProvider } from './services/AppContext';\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\nimport Loading from './components/Loading';\r\n\r\ndotenv.config();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <AppContextProvider>\r\n        <App />\r\n        <Loading/>\r\n      </AppContextProvider>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}